Сделайте сервисы вашего приложения транзакционными.

В нашем приложении обработка запроса от пользователя на бекенде
начинается с класса сервиса. Почти всегда запрашиваемые пользователем
изменения должны быть или выполнены полностью или не выполнены совсем.
Тоесть в базу данных должны быть внесены все требуемые в рамках данного
запроса изменения или база данных должна остаться в том состоянии в
котором она была до выполнения запроса.

Например:
- при регистрации читателя при успешном выполнении функциональности
  в базу должна быть внесена новая запись, а при не успешном
  выполнении база долдна остаться неизменной.

На данный момент аннотация @Transactional разполагаются только на
классах репозиториях. Это значит, что границей каждой из транзакций
будет только один метод внутри класса репозитория. И если из
сервис класса (или из другого места программы) будет происходить
несколько обращений к репозиториям то они будут происходить в рамках
разных транзакций. Целостность данных реляционные базы данных
обеспечивают только в рамках одной транзакции. Поэтому выполнение
одной функциональности в разных транзакциях может привести к
потенцильным проблемам связанным с целостностью данных. Например,
первая транзакция будет закомичена, а вторая из за возникшей
ошибки нет.

Для того, чтобы обеспечить выполнение всей функциональности в рамках
одной транзакции к базе данных разместите аннотацию @Transactional
на классах сервисах (AddBookService, RegisterReaderService, etc).
Это обеспечит то, что вся функциональность внутри сервисов будет
выполняться в рамках одной транзакции к базе данных.