Создайте в пакете /core/database класс ReaderRepository
и реализуйте в этом классе методы save(Reader reader)
и findById(Long id):


@Component
@Transactional
public class ReaderRepository {

	@Autowired private SessionFactory sessionFactory;


	public void save(Reader reader) {
		sessionFactory.getCurrentSession().save(reader);
	}

	public Reader findById(Long id) {
		return sessionFactory.getCurrentSession().get(Reader.class, id);
	}

}

При интеграции Java приложения с реляционной базой данных
принято для каждого доменного объекта создавать свой класс
репозитория. Это применение принцыпа Single Responsibility Principle
в действии. У классов репозиториев есть одна ответственность - реализовывать
логику работы с базой данных только для одного доменного объекта.

Такая реализация (один класс репозитория на доменный объект)
имеет и чисто практическую сторону. Если в приложении несколько
доменных объектов (а очень часто доменных объектов в приложении
бывает десятки) то уместить все методы работы с базой данных
для всех объектов в один класс практически не возможно. В таком
случае этот класс станет очень большим, в нм будет большое количество
строк кода и с ним будет очень сложно работать. Поэтому код интеграции
с базой данных в приложениях разбивают на несколько классов репозиторием,
по одному на используемый в приложении доменный объект. В таком
случае классы репозитории становятся не большими и легко изменяемыми
при необходимости.