Какие бывают индексы?

Вообще, в зависимости от типов баз данных, индексы могут быть
очень разными и реализоваться за счет специфических математических
механизмов. Но, наиболее частым является древовидный индекс,
так как поддерживать такой индекс относительно просто и максимальная
скорость поиска в нем составляет логарифм по числу максимального
количества дочерних узлом от общего количества записей
(плюс минус некоторые технические моменты).

Дерево (древовидный индекс) — это специального вида структура,
у которой есть корневая вершина и у каждого узла может быть
несколько дочерних узлов. При этом каждый узел встречается
только один раз и может иметь всего один родительский узел.

                             40
                           /    \
                         25      78
                       /   \    /  \
                      10    32 50  93
                     / \   /  \
                    3  17 30  38

Как видите, очень похоже на перевернутое обычное зеленое дерево,
у которого ветки растут не вверх, а вниз.

Максимальное количество дочерних узлов, как вероятно уже догадались
по картинке, это то количество дочерних узлов, больше которого у
одного узла не может быть.

Теперь поясню откуда берется логарифм. Дело в том, что дерево
обычно заполняется по определенным правилам. К примеру, если
у узла максимально может быть всего два дочерних узла
(так называемое бинарное дерево), то обычно левый дочерний
узел имеет значение меньше текущего, а правый большее значение.
Поэтому если вам нужно найти, например, число 30 в дереве с
рисунка чуть выше, то вам понадобится всего 4 сравнения
(40 — 25 — 32 — 30). Именно из-за этой особенности поиска
и берется логарифм (так как каждое сравнение сокращает
количество проверяемых элементов в два раза). При этом
обычно значение логарифма округляют в большую сторону.

Так же отмечу, что такая скорость достигается за счет того,
что дерево строится специальным образом, чтобы не возникало
таких ситуаций, как на картинке ниже, где максимальная скорость
поиска будет сравнима с простым перебором всех записей.

                             40
                           /
                         25
                       /
                      10
                     / \
                    3  17

Как видите, чтобы здесь найти запись с ключом «3» понадобится
4 сравнения (40 — 25 — 10 — 3), хотя всего записей 5.

Практически во всех базах данных, существует деление по уникальности:

Уникальный индекс — это такой индекс, у которого все значения
встречаются только один раз. Проводя аналогию, когда каждая
книга присутствует только в одном экземпляре и никогда названия
книг не совпадают.

Неуникальный индекс — это такой индекс, у которого значения
могут повторяться. Проводя аналогию, существуют книги с одними
и теми же названиями, но разными авторами, или же просто
встречаются копии.

Важно отметить, что если для таблицы создается уникальный индекс,
то это означает, что при попытке добавить запись со значением,
которое уже встречалось, или же изменить значение какой-то записи
на существующее, то база данных не позволит сделать такое действие
и будет ругаться (выдавать ошибки). В случае же с неуникальным
индексом таких проблем нет.

Так же стоит знать, что индексы делятся по количеству входящих в них полей:

Обычные индексы — состоят из одного поля. Здесь, вероятно, все понятно.
Обычный каталог страничек.

Составные индексы — строятся по нескольким полям, при этом
расположение полей является важным.

Чуть подробнее про составные индексы. Рассмотрим аналогию с
теми же книгами. До этого индекс строился только по названию.
Теперь же представим, что книги с одинаковыми названиями часто
встречаются. В такой ситуации, легко может получится, что
страничка каталога будет состоять из координат сотен книг
(десятки авторов и у каждого по десять копий). Бегать их всех
проверять — так же немалое количество времени. Поэтому вместо
того, чтобы страничка просто перечисляла все местонахождения книг,
можно сделать так, чтобы странички с именами книг указывали на
дополнительные каталоги, где аналогичным образом проиндексированы
авторы.

Немного упрощая, поиск будет выглядит примерно так.

1. Вначале вы ищите в каталоге с именами необходимую
страничку с названием.

2. Затем в этой страничке смотрите, где находится
соответствующий каталог с авторами.

3. Берете этот каталог и уже в нем находите страничку,
где указано месторасположение всех книг с этим автором и названием.


При этом важно понимать, что для каждого названия будет
создаваться собственный каталог авторов. То есть в обратном порядке,
к сожалению, поиск не осуществить. Если же требуется поиск вначале
по автору, а уже затем по названиям книг, то необходимо создавать
отдельный составной каталог (составной индекс).