Что такое индекс базы данных и зачем он нужен?

Чтобы понять зачем нужны индексы в базе данных и
что он собой представляет, сейчас рассмотрим простой пример.

Представьте себе, что у вас есть полочка для книг.
При этом изначально эта полочка с книгами пуста.
Книги вам то приносят, то уносят, то делают в них
какие-то корректировки (к примеру, мемуары или может быть черновики)
и тому подобное.

Так как полочка маленькая, то вы как-то не особо задумывались
о какой-либо системе классификации, а просто вставляете книги
в любые пустые места.

Каждый раз когда-то вам или кому-то необходимо найти определенную книгу,
возникает необходимость просматривать все книги с самого начала полочки
до первой попавшейся (если нужна только одна книга) или полностью все
(если нужно собрать все копии). В принципе, для одной полочки это весьма
необременительно.

Теперь, представьте себе, что речь идет не об одной полочке,
а об огромном помещении, где находятся тысячи книг.

Тут-то вы и начинаете задумываться о том, что неплохо бы ввести
какую-то систему классификации, например, по названию книги.
Конечно, полностью сортировать все эти тысячи книг в алфавитном
порядке вы не собираетесь, плюс с этим возникло бы куча других
вопросов (как добавить книгу в уже заполненную полку и прочие).

Поэтому вы поступаете проще, вы берете каталог, где возможно
добавлять листочки. При этом каждую страницу выделяете только
под одно название книги, а сами страницы располагаете в каталоге
в порядке возрастания названий. Содержание этих страниц весьма
просто — вы записываете в каком стеллаже, на какой полке и какой
по счету является книга. Если книг несколько, то строчек в этой
странице становится несколько.

Таким образом, чтобы найти одну или все нужные книги по названию,
вам достаточно открыть этот каталог и быстро пролестнуть до нужной
страницы, а затем пройтись по всем указанным стеллажам. При этом
для упрощения, вы так же можете первые буквы названий так же
индексировать. То есть добавляете наклейку на каждую первую
страницу с указанной буквой (таким образом можете сразу перейти,
например, к букве «Р», не пролистывая все названия до нее).

Конечно, для поддержки такой системы требуется дополнительное время,
но все же оно существенно меньше, чем попытка найти вслепую книгу
из тысячи (пара минут против нескольких часов и более).

Так вот, в данном примере, если переносить это в базу данных:

Помещение — это таблица в базе данных. Если чуть проще,
то любое скопище однотипных данных (тех же книг), по сути,
представляет собой таблицу.

Поиск книги — это sql-запросы получения данных. При этом важно отметить,
что сами по себе они не меняются. То есть вам как нужно было найти
«Термодинамику», так и осталось нужным найти «Термодинамику».
Другое дело, как вы будете это осуществлять — прочесывая тысячи
книг или открыв каталог.

Каталог — это и есть упрощенный вариант индекса в базе данных.
То есть, индекс это набор дополнительных данных, записанных в удобном
виде, который позволяет существенно быстрее осуществлять поиск,
хоть и требующий дополнительных усилий для поддерживания его
актуальности.

Имя книги (страничка) — это ключ в индексе. То уникальное значение,
которое может ссылаться как на одну какую-то запись, так и на несколько.
Стоит отметить, что даже если записей для каждого значения будет
несколько, это все равно быстрее, чем полный перебор всех данных.

Если суммировать, то можно увидеть, что наличие индекса может быть
весьма выгодным. Например, для одной домашней полочки с десятком
книг — индекс в общем-то не сильно нужен, а вот когда речь заходит
о более больших объемах, то индекс будет весьма полезным.

Так же можно заметить, что добавление индекса не требует того,
чтобы сами sql-запросы были переписаны, так как последние являются
лишь выражением на упрощенном языке для базы данных. Если продолжить
аналогию, то это как попросить кого-то найти вам «Флора и фауна».
При этом каким образом и сколько этот кто-то будет искать книгу,
будет решать сам этот человек. В данном примере
«найти книгу» — это sql-запрос, а этот «кто-то» это база данных.