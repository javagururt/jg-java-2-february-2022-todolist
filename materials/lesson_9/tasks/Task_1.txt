ORM (англ. Object-Relational Mapping, рус. объектно-реляционное
отображение, или преобразование) — технология программирования,
которая связывает базы данных с концепциями объектно-ориентированных
языков программирования, создавая «виртуальную объектную базу данных».
Существуют как проприетарные, так и свободные реализации этой технологии.


Задача

Необходимо обеспечить работу с данными в терминах классов,
а не таблиц данных и напротив, преобразовать термины и данные
классов в данные, пригодные для хранения в СУБД. Необходимо также
обеспечить интерфейс для CRUD-операций над данными. В общем, необходимо
избавиться от необходимости писать SQL-код для взаимодействия в СУБД.

Реляционные СУБД

Решение проблемы хранения данных существует — это реляционные системы
управления базами данных. Использование реляционной базы данных для
хранения объектно-ориентированных данных приводит к семантическому
разрыву, заставляя программистов писать программное обеспечение,
которое должно уметь как обрабатывать данные в объектно-ориентированном
виде, так и уметь сохранить эти данные в реляционной форме.
Эта постоянная необходимость в преобразовании между двумя разными
формами данных не только сильно снижает производительность, но и
создает трудности для программистов, так как обе формы данных
накладывают ограничения друг на друга.

Реляционные базы данных используют набор таблиц, представляющих
простые данные. Дополнительная или связанная информация хранится
в других таблицах. Часто для хранения одного объекта в реляционной
базе данных используется несколько таблиц; это, в свою очередь,
требует применения операции JOIN для получения всей информации,
относящейся к объекту, для её обработки. Например, для хранения
данных записной книжки, скорее всего, будут использоваться как
минимум две таблицы: люди и адреса, и, возможно, даже таблица с
телефонными номерами.

Так как системы управления реляционными базами данных обычно
не реализуют реляционного представления физического уровня связей,
выполнение нескольких последовательных запросов (относящихся к одной
«объектно-ориентированной» структуре данных) может быть слишком
затратно. В частности, один запрос вида «найти такого-то пользователя
и все его телефоны и все его адреса и вернуть их в таком формате»,
скорее всего, будет выполнен быстрее серии запросов вида
«Найти пользователя. Найти его адреса. Найти его телефоны».
Это происходит благодаря работе оптимизатора и затратам на
синтаксический анализ запроса.

Некоторые реализации ORM автоматически синхронизируют загруженные
в память объекты с базой данных. Для того чтобы это было возможным,
после создания объект-в-SQL-преобразующего SQL-запроса (класса,
реализующего связь с DB) полученные данные копируются в поля объекта,
как во всех других реализациях ORM. После этого объект должен следить
за изменениями этих значений и записывать их в базу данных.

Системы управления реляционными базами данных показывают хорошую
производительность на глобальных запросах, которые затрагивают
большой участок базы данных, но объектно-ориентированный доступ
более эффективен при работе с малыми объёмами данных, так как это
позволяет сократить семантический провал между объектной и реляционной
формами данных.

При одновременном существовании этих двух разных миров увеличивается
сложность объектного кода для работы с реляционными базами данных,
и он становится более подвержен ошибкам. Разработчики программного
обеспечения, основывающегося на базах данных, искали более легкий
способ достижения постоянства их объектов.


Решение

Разработано множество пакетов, устраняющих необходимость в
преобразовании объектов для хранения в реляционных базах данных.

Некоторые пакеты решают эту проблему, предоставляя библиотеки классов,
способных выполнять такие преобразования автоматически. Имея список
таблиц в базе данных и объектов в программе, они автоматически
преобразуют запросы из одного вида в другой. В результате запроса
объекта «человек» (из примера с адресной книгой) необходимый SQL-запрос
будет сформирован и выполнен, а результаты «волшебным» образом
преобразованы в объекты «номер телефона» внутри программы.

С точки зрения программиста система должна выглядеть как постоянное
хранилище объектов. Он может просто создавать объекты и работать с
ними как обычно, а они автоматически будут сохраняться в реляционной
базе данных.

На практике всё не так просто и очевидно. Все системы ORM обычно
проявляют себя в том или ином виде, уменьшая в некотором роде
возможность игнорирования базы данных. Более того, слой транзакций
может быть медленным и неэффективным (особенно в терминах
сгенерированного SQL). Все это может привести к тому, что программы
будут работать медленнее и использовать больше памяти, чем программы,
написанные «вручную».

Но ORM избавляет программиста от написания большого количества кода,
часто однообразного и подверженного ошибкам, тем самым значительно
повышая скорость разработки. Кроме того, большинство современных
реализаций ORM позволяют программисту при необходимости самому
жёстко задать код SQL-запросов, который будет использоваться при
тех или иных действиях (сохранение в базу данных, загрузка, поиск
и т. д.) с постоянным объектом.